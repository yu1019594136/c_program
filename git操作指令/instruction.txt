1、在某个目录下该指令创建仓库。
git init

2、查看git软件版本
git --version

3、配置用户名和邮箱
git config --global user.name "username"
git config --global user.email "useremail"

4、查看所有设置
git config --list

5、将git目录下的所有文件和文件夹添加到仓库
git add .

6、查看版本日志
git log(查看提交历史，以便于回退到某个版本)
git reflog（查看命令记录，以便于回退到未来某个版本）

7、将文件添加到仓库中进行管理，或者有时候是提交修改的第一步,把要工作区的修改放到赞存区stage
git add files

8、查看仓库中当前状态，工作区和暂存区是否又变动
git status

9、查看工作区里面做了什么修改，
git diff

10、提交修改的第二步，把暂存区所有内容提交到当前分支，形成新版本
git commit -m "注释"

11、撤销工作区的修改，工作区的修改将不再被保存。
git checkout -- filename

12、将暂存区的修改放回工作区(unstage)
git reset HEAD filename

13、用于删除一个版本中的文件
git rm filename

14、版本回退，可以穿梭于各种版本之间
git reset --hard commit_id



15、将本地仓库和远程仓库关联
git remote add origin git@github.com:accountname/repo_name.git

16、第一次推送同时加上参数u，将本地master分支和远程的master分支关联起来
git push -u origin master

17、本地提交修改后，推送至远程仓库
git push origin master

18、将本地仓库和远程仓库进行关联，一定要在仓库目录下运行这条命令。
git remote add 远程仓库名称 git@github.com:yu1019594136/c_program.git
比如：git remote add origin_c_program git@github.com:yu1019594136/c_program.git

19、测试和github的链接是否成功
ssh git@github.com

关于git托管网站，GitHub和CSDN.code都提供仓库托管服务，但是首先，都需要在该网站上申请帐号以及注册邮箱，在本地创建一个文件夹作为本地仓库路径，此时如果使用GitHub托管服务，那么本地git的用户名和邮箱必须配置成和GitHub网站上一样的；如果使用csdn.code.net，那么也必须同样本地git的用户名和邮箱必须配置成和csdn.code.net网站上一样的
